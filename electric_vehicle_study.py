# -*- coding: utf-8 -*-
"""Electric_Vehicle_Study.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VaWcO_iwgPg2FcCM2p-j13_3hULiQ7X8

### **Importing the libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import warnings
warnings.filterwarnings('ignore')
# %matplotlib inline

"""### **Reading the raw data**"""

#raw data
df = pd.read_csv('https://data.wa.gov/api/views/f6w7-q2d2/rows.csv?accessType=DOWNLOAD')
df.head()

"""### **Understanding the data**"""

df.shape

df.columns

df.info()

# df['State'].value_counts()

"""### **Creating a df consisting only WA data**"""

wa_df = df[df['State'] == 'WA']
wa_df.head()

wa_df.shape

red_shape = df.shape[0] - wa_df.shape[0]
red_shape

"""### **Dropping non-prominent columns**"""

# #'VIN (1-10)', 'County', 'City', 'State', 'Postal Code', 'Model Year',
# 'Make', 'Model', 'Electric Vehicle Type',
# 'Clean Alternative Fuel Vehicle (CAFV) Eligibility', 'Electric Range',
# 'Base MSRP', 'Legislative District', 'DOL Vehicle ID',
# 'Vehicle Location', 'Electric Utility', '2020 Census Tract'

wa_df.drop(columns = ['State', 'Postal Code', 'Vehicle Location', '2020 Census Tract'], inplace=True, axis=1)
wa_df.head()

wa_df.columns

# wa_duplicates = wa_df[wa_df['DOL Vehicle ID'].duplicated()]
# wa_duplicates

vehicle_counts = df['Electric Vehicle Type'].value_counts()

plt.figure(figsize=(6, 5))
plt.bar(vehicle_counts.index, vehicle_counts.values, color='skyblue')
plt.title('Count of Each Car Type')
plt.xlabel('Electric Vehicle Type')
plt.ylabel('Count of Vehicles')
plt.xticks(rotation=30)
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 6))
sns.countplot(x='Electric Vehicle Type', data=df, palette='viridis')

# Customize the plot
plt.title('Population of Electric Vehicle Type')
plt.xlabel('Electric Vehicle Type')
plt.ylabel('Count of Vehicles')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability

# Show the plot
plt.tight_layout()
plt.show()

wa_df.drop('Legislative District', inplace=True, axis=1)
wa_df.head()

wa_df['Make'].unique()

make_counts = wa_df['Make'].value_counts().reset_index()
make_counts.columns = ['Make', 'Count']

plt.figure(figsize=(12, 8))
make_counts.head(20).plot(kind='bar', x='Make', y='Count', legend=False, color='skyblue')
plt.title('Top 20 Car Makers Market Share in Washington (WA)', fontsize=16)
plt.xlabel('Car Maker', fontsize=12)
plt.ylabel('Count of Vehicles', fontsize=12)
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

pip install -U kaleido

top_5_makers = make_counts.head(5)
fig = px.pie(top_5_makers, names='Make', values='Count',
             title='Top 5 Car Makers Market Share in Washington (WA)',
             labels={'Make': 'Car Maker', 'Count': 'Number of Vehicles'},
             hole=0.3)  # This creates a donut chart (optional)
fig.show()

wa_df.groupby('County')['Model'].nunique().idxmax()
county_with_most_unique_models = wa_df.groupby('County')['Model'].nunique().idxmax()
# Get the most frequent model in the county with the most unique models
most_frequent_model = wa_df[wa_df['County'] == county_with_most_unique_models]['Model'].mode()[0]
print(most_frequent_model)
adoption_counts = wa_df.groupby(['Model Year', 'Make'])['VIN (1-10)'].nunique().reset_index()
adoption_counts = adoption_counts[(adoption_counts['Model Year'] >= 2014) & (adoption_counts['Model Year'] <= 2024)]
pivot_data = adoption_counts.pivot(index='Model Year', columns='Make', values='VIN (1-10)').fillna(0)
pivot_data.head(5)

plt.figure(figsize=(8, 6))
sns.lineplot(data=pivot_data, marker='o')

plt.title('EV Adoption Rate Among Car Makers over the years')
plt.xlabel('Model Year')
plt.ylabel('Number of Unique VINs')
plt.legend(title='Car Maker', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(pivot_data.index, rotation=45)
plt.show()

fig = px.line(adoption_counts, x='Model Year', y='VIN (1-10)', color='Make', title = 'EV Adoption Rate Among Car Makers over the years', labels= {'VIN': 'Number of Unique VINs'}, markers=True)

# fig.update_layout(xaxis_title='Year', yaxis_title='Number of Unique VINs')
fig.show()

"""### **Top 10 Cities with the highest number of EVs**



"""

city = wa_df['City'].value_counts().reset_index()
city.columns = ['City', 'No. of EVs']
top10_cities = city.head(10)

fig = px.bar(top10_cities,
             x = 'City',
             y = 'No. of EVs',
             title = 'Top 10 cities with the highest number of EVs',
             labels = {'City':'City', 'No. of EVs':'Number of Registered Electric Vehicles'})
fig.show()

"""### **Top 10 Car Makers by Unique Models Manufactured since 2016**"""

df_filtered = wa_df[wa_df['Model Year'] >= 2016]
make_models = df_filtered.groupby('Make')['Model'].nunique().reset_index()
make_models = make_models.sort_values(by='Model', ascending=False)
top_makers = make_models.head(10)

fig = px.bar(top_makers,
             x = 'Make',
             y = 'Model',
             title = 'Top 10 Car Makers by Unique Models Manufactured since 2016',
             labels = {'Make': 'Car Maker', 'Model':'Unique Models Manufactured'})
fig.show()

wa_df[wa_df['Make'] == 'BMW']['Model Year'].min()

model_counts = wa_df.groupby(['Make', 'Model']).size().reset_index(name = 'Number of registrations')
make_model_counts = model_counts.sort_values(by='Number of registrations', ascending=False)
favourite_make_model = make_model_counts.head(1)

favourite_make_model

top10_favourite = make_model_counts.head(10)
top10_favourite = top10_favourite.sort_values(by='Number of registrations', ascending=False)
top10_favourite

seattle_df = wa_df[wa_df['City'] == 'Seattle']
seattle_make_model = seattle_df.groupby(['Make', 'Model']).size().reset_index(name='Number of registrations')
seattle_make_model = seattle_make_model.sort_values(by='Number of registrations', ascending=False)
top10_seattle_make_model = seattle_make_model.head(10)

fig = px.bar(top10_seattle_make_model,
             x = 'Model',
             y = 'Number of registrations',
             color = 'Make',
             title = 'Top 10 Most Popular EVs in Seattle by Maker(s)',
             labels = {'Model':'EV Model', 'Maker':'Number of registrations'},
             color_discrete_sequence=px.colors.qualitative.Set1)
fig.show()